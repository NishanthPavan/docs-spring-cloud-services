---
title: Creating an Instance
---

<strong><%= modified_date %></strong>

You can create a Config Server instance using either the cf Command Line Interface tool or [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) Apps Manager.

## Using the cf CLI

Begin by targeting the correct org and space.

<pre class="terminal">
$ cf target -o myorg -s development

API endpoint:   https://api.wise.com (API version: 2.43.0)
User:           user
Org:            myorg
Space:          development
</pre>

If desired, view plan details for the Config Server product using `cf marketplace -s`.

<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org myorg / space development as user...
OK

service                       plans          description
p-circuit-breaker-dashboard   standard       Circuit Breaker Dashboard for Spring Cloud Applications
p-config-server               standard       Config Server for Spring Cloud Applications
p-mysql                       100mb-dev      MySQL service for application development and testing
p-rabbitmq                    standard       RabbitMQ is a robust and scalable high-performance multi-protocol messaging broker.
p-service-registry            standard       Service Registry for Spring Cloud Applications

TIP:  Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service.

$ cf marketplace -s p-config-server
Getting service plan information for service p-config-server as user...
OK

service plan   description     free or paid
standard       Standard Plan   free
</pre>

Create the service instance using `cf create-service`. Optionally, you may add the `-c` flag and provide a JSON object that specifies configuration parameters:

* `git.uri`: The URL of the Git repository
* `git.label`: The label
* `git.searchPaths`: The search path or paths
* `git.username`: The username (necessary if the repository is protected by HTTP Basic authentication)
* `git.password`: The password (necessary if the repository is protected by HTTP Basic authentication)

For details on the purpose of each of these fields, see the [The Config Server](/spring-cloud-services/config-server/server.html) subtopic.

<p class='note'><strong>Note</strong>: Use of the <code>-c</code> flag to specify Config Server settings is available only in Spring Cloud Services 1.0.4 and later.</p>

To create the instance by specifying only the service, plan name, and instance name:

<pre class="terminal">
$ cf create-service p-config-server standard config-server
Creating service instance config-server in org myorg / space development as user...
OK
</pre>

To create the instance and specify configuration parameters:

<pre class="terminal">
$ cf create-service -c '{ "git": { "uri": "https://github.com/spring-cloud-samples/cook-config", "label": "master" } }' p-config-server standard config-server
Creating service instance config-server in org myorg / space development as user...
OK
</pre>

## Using Apps Manager

Log into Apps Manager as a Space Developer. In the Marketplace, select **Config Server**.

   <%= image_tag("config-server/1_marketplace.png") %>

Select the desired plan for the new service.

   <%= image_tag("config-server/2_select_plan.png") %>

Provide a name for the service (for example, "My Config Server"). Click the **Add** button.

   <%= image_tag("config-server/3_instance_name.png") %>

In the **Services** list, click the **Manage** link under the listing for the new service instance.

   <%= image_tag("config-server/4_service_successfully_added.png") %>

   Enter a repository URI. You can also enter:

   * A branch name as the default "label" to be used if the Config Server receives a request without a label.
   * A pattern or comma-separated list of patterns which specifies how the Config Server searches for configuration-containing subdirectories in the repository (see the [Spring Cloud Config documentation on `searchPaths`](http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_git_backend)).
   * A username and password if the repository uses HTTP Basic authentication.

   When the appropriate fields are filled out, hit the **Submit** button.

   <%= image_tag("config-server/dashboard.png") %>

<p class='note'><strong>Important</strong>: When you submit the form, you will see the message "Config server settings saved", and the Config Server will attempt to initialize with the values that you provided. If the Server cannot initialize, you will get an error: "The Config Server cannot initialize using the configuration that has been provided in this form. Please double-check the configuration, correct any mistakes, and resubmit." <br /><br /> Be sure to double-check the fields that you filled out for accuracy and wait until the Config Server has initialized before proceeding.</p>

The Config Server instance is now ready to be used. For details on how the Config Server stores and retrieves configurations, see the <a href="/spring-cloud-services/config-server/server.html">The Config Server</a> subtopic.
