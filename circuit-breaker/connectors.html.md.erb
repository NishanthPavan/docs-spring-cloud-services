---
title: Spring Cloud&reg; Connectors
---

<strong><%= modified_date %></strong>

To connect client applications to the Circuit Breaker Dashboard, Spring Cloud Services uses [Spring Cloud Connectors](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-connectors.html), including the [Spring Cloud Cloud Foundry Connector](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html), which discovers services bound to applications running in Cloud Foundry.

## Service Detection

The connector inspects Cloud Foundry's `VCAP_SERVICES` environment variable, which stores connection and identification information for service instances that are bound to Cloud Foundry applications, to detect available services. Below is an example of a `VCAP_SERVICES` entry for the Spring Cloud Services Circuit Breaker Dashboard (edited for brevity).

```json
"p-circuit-breaker-dashboard": [
 {
  "credentials": {
   "dashboard": {
    "uri": "https://hystrix-fd3842f2-ad07-40c0-9908-a763061f332c.apps.wise.com"
   },
   "stream": {
    "uri": "https://turbine-fd3842f2-ad07-40c0-9908-a763061f332c.apps.wise.com"
   }
  },
  "label": "p-circuit-breaker-dashboard",
  "name": "circuit-breaker-dashboard",
  "plan": "standard",
  "tags": [
   "circuit-breaker",
   "hystrix-amqp",
   "spring-cloud"
  ]
 }
]
```

For each service in the `VCAP_SERVICES` variable, the connector considers the following fields:

* `tags`: Attributes or names of backing technologies behind the service.
* `label`: The service offering's name (not to be confused with a service _instance's_ name).
* `credentials.uri`: A URI pertaining to the service instance.
* `credentials.uris`: URIs pertaining to the service instance.

### Circuit Breaker Dashboard Detection Criteria

To establish availability of the Circuit Breaker Dashboard, the Spring Cloud Cloud Foundry Connector compares `VCAP_SERVICES` service entries against the following criteria:

* `tags` including `hystrix-amqp`

## Application Configuration

In a Spring Boot application which is bound to a Circuit Breaker Dashboard service instance, the connector automatically creates a Spring RabbitMQ ```ConnectionFactory``` bean using the credentials from the service binding. [Spring Cloud Netflix](http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html) Hystrix AMQP uses this ```ConnectionFactory``` to send metrics from the client application to a [Netflix Turbine](https://github.com/Netflix/Turbine) application, which aggregates metrics from all applications bound to the Circuit Breaker Dashboard service instance for display on the Hystrix dashboard.

In a Spring application which is not using Spring Boot and will be bound to a Circuit Breaker Dashboard service instance, you can explicitly invoke the Spring Service Connector's service scanning to cause the Hystrix AMQP ```ConnectionFactory``` to be created and registered. See ["Scanning for Services" in the Spring Cloud Spring Service Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_scanning_for_services).

If you do not want to use either Spring Boot autoconfiguration or service scanning, or if you want to further customize the ```ConnectionFactory``` in Java code, you can explicitly invoke the Spring Cloud Connectors configuration for Circuit Breaker Dashboard:

```java
@Configuration
public class CloudConfig extends CloudConnectorsConfig {
  @Bean
  public ConnectionFactory hystrixConnectionFactory() {
    return connectionFactory().hystrixConnectionFactory();
  }
}
```

<a id="configure-multiple-rabbitmq-connections"></a>
### Configure Multiple RabbitMQ Connections

If your client application uses RabbitMQ for its own business purposes and is bound to a [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) RabbitMQ service instance as well as to a Spring Cloud Services Circuit Breaker Dashboard service instance, then the client application may need two Spring RabbitMQ ```ConnectionFactory``` beans. In this scenario, Spring Cloud needs to know which ```ConnectionFactory``` bean to use for Hystrix AMQP.

To facilitate this, use explicit Spring Cloud Connectors configuration to create the two ```ConnectionFactory``` beans, using annotations to make the purpose of each bean clear.

One configuration class uses the ```@HystrixConnectionFactory``` annotation to cause Hystrix AMQP to use the created ```ConnectionFactory```:

```java
@Configuration
public class CloudConfig extends CloudConnectorsConfig {
  @Bean
  @HystrixConnectionFactory
  public ConnectionFactory hystrixConnectionFactory() {
    return connectionFactory().hystrixConnectionFactory();
  }
}
```

Another configuration class uses the ```@Primary``` annotation to cause your client application code to use the created ```ConnectionFactory```:

```java
@Configuration
public class RabbitConfig extends AbstractCloudConfig {
  @Bean
  @Primary
  public ConnectionFactory rabbitConnectionFactory() {
    return connectionFactory().rabbitConnectionFactory();
  }

  @Bean
  public DirectExchange exchange() {
    return new DirectExchange("sample-exchange", true, false);
  }

  @Bean
  public Queue queue() {
    return new Queue("sample-queue");
  }

  @Bean
  public Binding sampleBinding() {
    Queue queue = queue();
    DirectExchange exchange = exchange();
    return BindingBuilder.bind(queue).to(exchange).with(queue.getName());
  }
}
```
If you do use any explicit Spring Cloud Connectors configuration, it will disable Spring Boot's [CloudAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/v1.2.8.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java), so you will need to explicitly declare beans for any other service to which your application is bound. For example, to explicitly declare a bean for a Netflix Eureka service:

```java
@Bean
public EurekaClientConfigBean eurekaClientConfig() {
    return connectionFactory().eurekaClientConfig();
}
```

## See Also

For more information about Spring Cloud Connectors, see the following:

* [Spring Cloud Cloud Foundry Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html)
* [Spring Cloud Spring Service Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html)
* [Spring Cloud Connectors documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-connectors.html)
* [Spring Cloud Connectors for Spring Cloud Services on Pivotal Cloud Foundry](https://github.com/pivotal-cf/spring-cloud-services-connector)
