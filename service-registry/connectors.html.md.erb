---
title: Spring Cloud&reg; Connectors
---

<strong><%= modified_date %></strong>

To connect client applications to the Service Registry, Spring Cloud Services uses [Spring Cloud Connectors](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-connectors.html), including the [Spring Cloud Cloud Foundry Connector](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html), which discovers services bound to applications running in Cloud Foundry.

## Service Detection

The connector inspects Cloud Foundry's `VCAP_SERVICES` environment variable, which stores connection and identification information for service instances that are bound to Cloud Foundry applications, to detect available services. Below is an example of a `VCAP_SERVICES` entry for the Spring Cloud Services Service Registry.

```json
"p-service-registry": [
 {
  "credentials": {
   "access_token_uri": "https://p-spring-cloud-services.uaa.cf.wise.com/oauth/token",
   "client_id": "p-service-registry-57bdc399-5b2e-4131-b941-d0a4275c2da4",
   "client_secret": "GAmFDRU4KGnS",
   "uri": "https://eureka-32fb7386-2d57-4054-91b4-9fd4dcbac221.apps.wise.com"
  },
  "label": "p-service-registry",
  "name": "service-registry",
  "plan": "standard",
  "tags": [
   "eureka",
   "discovery",
   "registry",
   "spring-cloud"
  ]
 }
]
```

For each service in the `VCAP_SERVICES` variable, the connector considers the following fields:

* `tags`: Attributes or names of backing technologies behind the service.
* `label`: The service offering's name (not to be confused with a service _instance's_ name).
* `credentials.uri`: A URI pertaining to the service instance.
* `credentials.uris`: URIs pertaining to the service instance.

### Service Registry Detection Criteria

To establish availability of the Service Registry, the Spring Cloud Cloud Foundry Connector compares `VCAP_SERVICES` service entries against the following criteria:

* `tags` including `eureka`

## Application Configuration

In a Spring Boot application which is bound to a Service Registry service instance, the connector automatically creates a [Spring Cloud Netflix](http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html) Eureka client configuration bean and registers it in the Spring application context. The client configuration includes the discovery zone, which is configured using the URL from the service binding; this is equivalent to setting the ```eureka.client.serviceUrl.defaultZone``` property.

In a Spring application which is not using Spring Boot and will be bound to a Service Registry service instance, you can explicitly invoke the Spring Service Connector's service scanning to cause the Eureka client configuration to be created and registered. See ["Scanning for Services" in the Spring Cloud Spring Service Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_scanning_for_services).

If you do not want to use either Spring Boot auto-configuration or service scanning, or if you want to further customize the client configuration in Java code, you can explicitly invoke the Spring Cloud Connectors configuration for Service Registry:

```java
@Configuration
public class CloudConfig extends CloudConnectorsConfig {
  @Bean
  public EurekaClientConfigBean eurekaClientConfig() {
    return connectionFactory().eurekaClientConfig();
  }
}
```

## See Also

For more information about Spring Cloud Connectors, see the following:

* [Spring Cloud Cloud Foundry Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html)
* [Spring Cloud Spring Service Connector documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html)
* [Spring Cloud Connectors documentation](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-connectors.html)
* [Spring Cloud Connectors for Spring Cloud Services on Pivotal Cloud Foundry](https://github.com/pivotal-cf/spring-cloud-services-connector)
