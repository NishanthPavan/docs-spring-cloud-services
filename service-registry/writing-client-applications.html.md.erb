---
title: Writing Client Applications
---

<strong><%= modified_date %></strong>

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-samples/greeting/tree/1.0.4">"greeting" repository</a> to follow along with the code in this subtopic._

To register your application with a Service Registry service instance or use it to consume a service that is registered with a Service Registry service instance, you must add the dependencies listed in the <a href="/spring-cloud-services/client-dependencies.html">Client Dependencies</a> topic to your application's build file. Be sure to include the dependencies for <a href="/spring-cloud-services/client-dependencies.html#service-registry">Service Registry</a> as well.

<p class='note'><strong>Important</strong>: Because of a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>, the Spring Cloud Services Starters for Service Registry will by default cause all application endpoints to be protected by HTTP Basic authentication. If you wish to disable this, please see <a href="#disable-http-basic-auth">Disable HTTP Basic Authentication</a> below.</p>

## <a id="self-signed-ssl-certificate"></a>Add Self-Signed SSL Certificate to JVM Truststore

Spring Cloud&reg; Services uses HTTPS for all client-to-service communication. If your [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) installation is using a self-signed SSL certificate, the certificate will need to be added to the JVM truststore before your application can be registered with a Service Registry service instance or consume a service that is registered with a Service Registry service instance.

Spring Cloud Services can add the certificate for you automatically. For this to work, you must set the ```CF_TARGET``` environment variable on your application to the API endpoint of your Elastic Runtime instance:

<pre class="terminal">
$ cf set-env message-generation CF_TARGET https://api.cf.wise.com
Setting env variable 'CF_TARGET' to 'https://api.cf.wise.com' for app message-generation in org myorg / space development as user...
OK
TIP: Use 'cf restage' to ensure your env variable changes take effect
$ cf restage message-generation
</pre>

As the output from the ```cf set-env``` command suggests, restage the application after setting the environment variable.

## <a id="register-a-service"></a>Register a Service

Follow the below instructions to register an application with a Service Registry service instance.

### <a id="identify-the-application"></a>Identify the Application

Your service application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/message-generation/src/main/java/message_generation/MessageGenerationApplication.java#L13-L16">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class MessageGenerationApplication {
    //...
```

The `MessageGenerationApplication` class also has <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/message-generation/src/main/java/message_generation/MessageGenerationApplication.java#L24-L28">a `/greeting` endpoint</a> which gives a JSON `Greeting` object.

```java
    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="salutation",
                              defaultValue="Hello") String salutation,
                             @RequestParam(value="name",
                              defaultValue="Bob") String name) {
        //...
        return new Greeting(salutation, name);
    }
```

Set the ```spring.application.name``` property to the value from the application deployment. In <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/message-generation/src/main/resources/application.yml#L1-L3">`application.yml`</a>:

```yml
spring:
  application:
    name: ${vcap.application.name}
```

### <a id="register-the-application"></a>Register the Application

Optionally, you may also specify the registration method that you wish to use for the application, using the `spring.cloud.services.registrationMethod` property. It can take either of two values:

* ```route```: The application will be registered using its Cloud Foundry route.
* ```direct```: The application will be registered using its host IP and port.

The default value for the ```registrationMethod``` property is ```route```. You may also provide configuration using properties under ```eureka.instance```, such as ```eureka.instance.hostname``` and ```eureka.instance.nonSecurePort``` (see the [Spring Cloud Netflix documentation](http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_service_discovery_eureka_clients)); if you do, those properties will override the value of ```registrationMethod```.

See below for information about the ```route``` and ```direct``` registration methods.

#### Route Registration

An application deployed to Pivotal Cloud Foundry can have one or more URLs, or "routes," bound to it. If you specify the ```route``` registration method, the application will be registered with the Service Registry instance using the first of these routes from the ```application_uris``` list in the application's ```VCAP_APPLICATION``` environment variable.

```json
{
 "VCAP_APPLICATION": {
  "application_name": "message-generation",
  "application_uris": [
   "message-generation.wise.com"
  ],
```

Requests from client applications to this registered application go through the Pivotal Cloud Foundry Router, and the Router provides load balancing between the clients and registered applications.

<!---
```java
// TODO: diagram showing Router use?
```
-->

This registration method is compatible with all deployments of Pivotal Cloud Foundry.

#### Direct Registration

An application running on Pivotal Cloud Foundry is provided with an externally-accessible IP address and port, which are made available in two environment variables: ```CF_INSTANCE_IP``` and ```CF_INSTANCE_PORT```. If you specify the ```direct``` registration method, the application will be registered with the Service Registry instance using this IP address and port.

Requests from client applications to this registered application will not go through the Pivotal Cloud Foundry Router. You can provide client-side load balancing using [Spring Cloud and Netflix Ribbon](http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#spring-cloud-ribbon).

This registration method is only compatible with Pivotal Cloud Foundry version 1.5 or higher. In Pivotal Cloud Foundry Operations Manager, within the **Pivotal Elastic Runtime** tile's **Security Config**, the "Enable cross-container traffic within each DEA" or "Enable cross-container traffic" option must be enabled.

#### Specify a Registration Method

If you do wish to specify a registration method, set the ```spring.cloud.services.registrationMethod``` property. In <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/message-generation/src/main/resources/application.yml#L1-L6">`application.yml`</a>:

```yml
spring:
  application:
    name: ${vcap.application.name}
  cloud:
    services:
      registrationMethod: route
```

As mentioned above, the ```route``` method is the default; it will be used if you do not specify ```registrationMethod```.

With the ```spring.application.name``` property set, you can now bind the application to a Service Registry instance. Once it has been bound and restaged and has successfully registered with the Registry, you will see it listed in the Service Registry dashboard (see the <a href="/spring-cloud-services/service-registry/using-the-dashboard.html">Using the Dashboard</a> subtopic).

<%= image_tag("service-registry/registered_service.png") %>

## <a id="consume-a-service"></a>Consume a Service

Follow the below instructions to consume a service that is registered with a Service Registry service instance.

### <a id="discover-and-consume-a-service-using-resttemplate"></a>Discover and Consume a Service Using RestTemplate

A consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/greeter/src/main/java/greeter/GreeterApplication.java#L19-L25">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>.

```java
@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class GreeterApplication {

    @Autowired
    private RestTemplate rest;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Important</strong>: If your <a href="https://network.pivotal.io/products/pivotal-cf">Pivotal Cloud Foundry</a> installation is configured to only allow HTTPS traffic, you must specify the <code>https://</code> scheme in the base URI used by your client application. For the below example, this means that you must change the base URI from <code>http://message-generation/greeting</code> to <code>https://message-generation/greeting</code>.</p>

By default, Service Registry requires HTTPS for access to registered services. If your client application is consuming a service application which has been registered with the Service Registry instance using route registration (see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#register-the-application">Register the Application</a> section above), you have two options:

1. Use the ```https://``` URI scheme to access the service.
1. In your application configuration, set the ```ribbon.IsSecure``` property to ```false```, and use the ```http://``` URI scheme to access the service.

If you wish to use HTTP rather than HTTPS, set ```ribbon.IsSecure``` first. In ```application.yml```:

```yml
ribbon:
  IsSecure: false
```

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so in the Greeter application, <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/greeter/src/main/java/greeter/GreeterApplication.java#L31-L41">the `hello()` method on the `GreeterApplication` class</a> uses the base URI ```http://message-generation``` to get a greeting message from Message Generation.

```java
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    public String hello(@RequestParam(value="salutation",
                                        defaultValue="Hello") String salutation,
                        @RequestParam(value="name",
                                        defaultValue="Bob") String name) {
        URI uri = UriComponentsBuilder.fromUriString("http://message-generation/greeting")
            .queryParam("salutation", salutation)
            .queryParam("name", name)
            .build()
            .toUri();

        Greeting greeting = rest.getForObject(uri, Greeting.class);
        return greeting.getMessage();
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/greeter/src/main/java/greeter/GreeterApplication.java#L43-L56">Greeter's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Message Generation.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

The Greeter application now responds with a customizable ```Greeting``` when you access its ```/hello``` endpoint.

<pre class="terminal">
$ curl http://greeter.wise.com/hello
Hello, Bob!

$ curl http://greeter.wise.com/hello?name=John
Hello, John!
</pre>

### <a id="discover-and-consume-a-service-using-feign"></a>Discover and Consume a Service Using Feign

If you wish to use [Feign](https://github.com/Netflix/feign) to consume a service that is registered with a Service Registry instance, you must declare ```spring-cloud-starter-feign``` as a dependency. Spring Cloud Netflix's Feign support had [a bug](https://github.com/spring-cloud/spring-cloud-netflix/issues/441) which was fixed in its version 1.0.4; however, Spring Cloud Services currently depends on Spring Cloud Netflix version 1.0.3. You will therefore also have to manually override the managed versions of the Spring Cloud Netflix dependencies.

If using Maven, include in [```pom.xml```](https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/pom.xml#L21-L37):

```xml
  <properties>
    <!-- override the managed versions of Spring Cloud Netflix dependencies -->
    <spring-cloud-netflix.version>1.0.4.RELEASE</spring-cloud-netflix.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-feign</artifactId>
    </dependency>
  </dependencies>
```

If using Gradle, include in [```build.gradle```](https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/build.gradle#L11-L43):

```groovy
ext["spring-cloud-netflix.version"] = "1.0.4.RELEASE"

dependencies {
    compile("org.springframework.cloud:spring-cloud-starter-feign:1.0.3.RELEASE")
}
```

Your consuming application must <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/src/main/java/greeter/GreeterApplication.java#L18-L25">include the ```@EnableDiscoveryClient``` annotation on a configuration class</a>. To have Feign client interfaces automatically configured, it must also use the ```@EnableFeignClients``` annotation. In the Greeter application, the ```GreeterApplication``` class contains an ```MessageGenerationClient``` interface, which is a Feign client for the Message Generation application.

```java
@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@RestController
public class GreeterApplication {

    @Autowired
    MessageGenerationClient messageGeneration;
    //...
```

To call a registered service, a consuming application can use a URI with a hostname matching the name with which the service is registered in the Service Registry. This way, the consuming application does not need to know the service application's actual URL; the Registry will take care of finding and routing to the service.

<p class='note'><strong>Important</strong>: If your Pivotal Cloud Foundry installation is configured to only allow HTTPS traffic, you must specify the <code>https://</code> scheme in the base URI used by your client application. For the below example, this means that you must change the base URI from <code>http://message-generation/greeting</code> to <code>https://message-generation/greeting</code>.</p>

By default, Service Registry requires HTTPS for access to registered services. If your client application is consuming a service application which has been registered with the Service Registry instance using route registration (see the <a href="/spring-cloud-services/service-registry/writing-client-applications.html#register-the-application">Register the Application</a> section above), you have two options:

1. Use the ```https://``` URI scheme to access the service.
1. In your application configuration, set the ```ribbon.IsSecure``` property to ```false```, and use the ```http://``` URI scheme to access the service.

If you wish to use HTTP rather than HTTPS, set ```ribbon.IsSecure``` first. In ```application.yml```:

```yml
ribbon:
  IsSecure: false
```

The Message Generation application is registered with the Service Registry instance as ```message-generation```, so the ```@FeignClient``` annotation on the <a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/src/main/java/greeter/GreeterApplication.java#L52-L56">```MessageGenerationClient``` interface</a> uses the base URI ```http://message-generation```. The interface declares one method, ```greeting()```, which accesses the Message Generation application's ```/greeting``` endpoint and sends along optional ```name``` and ```salutation``` parameters if they are provided.

```java
    @FeignClient("http://message-generation")
    interface MessageGenerationClient {
      @RequestMapping(value = "/greeting", method = GET)
      Greeting greeting(@RequestParam("name") String name, @RequestParam("salutation") String salutation);
    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/src/main/java/greeter/GreeterApplication.java#L37-L50">Greeter's `Greeting` class</a> uses Jackson's <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonCreator.html">`@JsonCreator`</a> and <a href="http://fasterxml.github.io/jackson-annotations/javadoc/2.1.0/com/fasterxml/jackson/annotation/JsonProperty.html">`@JsonProperty`</a> to read in the JSON response from Message Generation.

```java
    private static class Greeting {

        private String message;

        @JsonCreator
        public Greeting(@JsonProperty("message") String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }

    }
```

<a href="https://github.com/spring-cloud-samples/greeting/blob/1.0.4/feign-greeter/src/main/java/greeter/GreeterApplication.java#L27-L31">Its ```greeting()``` method</a> is mapped to the ```/hello``` endpoint and calls the ```greeting()``` method on ```MessageGenerationClient``` to get a greeting.

```java
    @RequestMapping(value = "/hello", method = GET)
    public String greeting(@RequestParam(value="salutation", defaultValue="Hello") String salutation, @RequestParam(value="name", defaultValue="Bob") String name) {
      Greeting greeting =  messageGeneration.greeting(name, salutation);
      return greeting.getMessage();
    }
```

Greeter now responds with a customizable ```Greeting``` when you access its ```/hello``` endpoint.

<pre class="terminal">
$ curl http://greeter.wise.com/hello
Hello, Bob!

$ curl http://greeter.wise.com/hello?name=John
Hello, John!
</pre>

## <a id="disable-http-basic-auth"></a>Disable HTTP Basic Authentication

The Spring Cloud Services Starter for Service Registry has a dependency on <a href="http://projects.spring.io/spring-security/">Spring Security</a>. Unless your application has other security configuration, this will cause all application endpoints to be protected by HTTP Basic authentication.

If you do not yet want to address application security, you can turn off Basic authentication by setting the `security.basic.enabled` property to `false`. In `application.yml` or `bootstrap.yml`:

```yml
security:
  basic:
    enabled: false
```

You might make this setting specific to a profile (such as the `dev` profile if you want Basic authentication disabled only for development):

```yml
---

spring:
  profiles: dev

security:
  basic:
    enabled: false
```

For more information, see ["Security" in the Spring Boot Reference Guide](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-security).
